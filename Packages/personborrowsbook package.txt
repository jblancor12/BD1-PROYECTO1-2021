create or replace package control_personborrowsbook is
Type t_ref_cursor is ref cursor;
PROCEDURE insert_personborrowsbook (pid_person IN NUMBER, pid_book NUMBER,ploan_date  varchar);
PROCEDURE remove_personborrowsbook (pid_loan NUMBER);
PROCEDURE update_pbb_id_person(pid_loan IN NUMBER, pnewid NUMBER);
PROCEDURE update_pbb_id_book(pid_loan IN NUMBER, pnewid NUMBER);
PROCEDURE update_pbb_loan_date(pid_loan number, pdate varchar2);
PROCEDURE update_pbb_return_date(pid_loan number, pdate varchar2);
Function showUserAvailableBook(pid_user number) return t_ref_cursor;
Function showUserReturnedBook(pid_user number) return t_ref_cursor;
Function showUserNotReturnedBook(pid_user number) return t_ref_cursor;
FUNCTION getpbbIdperson(pid_book IN NUMBER) RETURN NUMBER;
FUNCTION getpbbIdbook(pid_person IN NUMBER) RETURN NUMBER;
FUNCTION getpbbloan_date(pid_person IN NUMBER, pid_book IN NUMBER) RETURN DATE;
FUNCTION getpbbreturn_date(pid_person IN NUMBER, pid_book IN NUMBER) RETURN DATE;
end control_personborrowsbook;
/
create or replace PACKAGE BODY control_personborrowsbook IS

Function showUserAvailableBook(pid_user number) return t_ref_cursor is dept_cursor t_ref_cursor;
begin
open dept_cursor for
select a.id_book, a.title 
from book a 
join personownsbook b
on a.id_book = b.id_book
left  join personborrowsbook c
on b.id_book = c.id_book
where b.id_person = pid_user 
minus
select Distinct (a.id_book), a.title
from book a 
join personownsbook b
on a.id_book = b.id_book
right  join personborrowsbook c
on b.id_book = c.id_book
where b.id_person = pid_user and c.return_date is null;
Return dept_cursor;
end showUserAvailableBook; 


Function showUserReturnedBook(pid_user number) return t_ref_cursor is dept_cursor t_ref_cursor;
begin
open dept_cursor for
select b.id_loan,a.title , c.first_name, c.last_name, b.loan_date, b.return_date
from book a 
join personborrowsbook b
on a.id_book = b.id_book
join person c 
on b.id_person = c.id_person
join personownsbook d
on a.id_book = d.id_book
where d.id_person= pid_user and b.return_date is not null;
Return dept_cursor;
end showUserReturnedBook;


Function showUserNotReturnedBook(pid_user number) return t_ref_cursor is dept_cursor t_ref_cursor;
begin
open dept_cursor for
select b.id_loan, a.title , c.first_name, c.last_name, b.loan_date, b.return_date
from book a 
join personborrowsbook b
on a.id_book = b.id_book
join person c 
on b.id_person = c.id_person
join personownsbook d
on a.id_book = d.id_book
where d.id_person= pid_user and b.return_date  is  null;
Return dept_cursor;
end showUserNotReturnedBook;


PROCEDURE insert_personborrowsbook (pid_person IN NUMBER, pid_book NUMBER, ploan_date  varchar)AS
begin
    insert into personborrowsbook(id_person,id_book, loan_date)
    values (pid_person,pid_book,TO_DATE(ploan_date, 'yyyy/mm/dd'));
    commit;
end insert_personborrowsbook;


PROCEDURE remove_personborrowsbook (pid_loan number)AS
e_invalid_exc EXCEPTION;
begin
    delete from personborrowsbook
    where id_loan = pid_loan;
    commit;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_exc;
    END IF;
    EXCEPTION
    WHEN e_invalid_exc THEN
        DBMS_OUTPUT.PUT_LINE('No such row.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to remove.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
end remove_personborrowsbook;

PROCEDURE update_pbb_id_person(pid_loan IN NUMBER, pnewid NUMBER)AS
e_invalid_exc EXCEPTION;
begin
    update personborrowsbook
    set id_person=pnewid
    where id_loan=pid_loan;
    commit;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_exc;
    END IF;
    EXCEPTION
    WHEN e_invalid_exc THEN
        DBMS_OUTPUT.PUT_LINE('No such row.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
end update_pbb_id_person;

PROCEDURE update_pbb_id_book(pid_loan IN NUMBER, pnewid NUMBER)AS
e_invalid_exc EXCEPTION;
begin
    update personborrowsbook
    set id_book=pnewid
    where id_loan=pid_loan;
    commit;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_exc;
    END IF;
    EXCEPTION
    WHEN e_invalid_exc THEN
        DBMS_OUTPUT.PUT_LINE('No such row.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
end update_pbb_id_book;

PROCEDURE update_pbb_loan_date(pid_loan number, pdate varchar2)AS
e_invalid_exc EXCEPTION;
begin
    update personborrowsbook
    set loan_date=TO_DATE(pdate,'yyyy/mm/dd')
    where id_loan=pid_loan;
    commit;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_exc;
    END IF;
    EXCEPTION
    WHEN e_invalid_exc THEN
        DBMS_OUTPUT.PUT_LINE('No such row.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
end update_pbb_loan_date;


PROCEDURE update_pbb_return_date(pid_loan number, pdate varchar2)AS
e_invalid_exc EXCEPTION;
begin
    update personborrowsbook
    set return_date=TO_DATE(pdate,'yyyy/mm/dd')
    where id_loan=pid_loan;
    commit;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_exc;
    END IF;
    EXCEPTION
    WHEN e_invalid_exc THEN
        DBMS_OUTPUT.PUT_LINE('No such row.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
end update_pbb_return_date;

FUNCTION getpbbIdperson(pid_book IN NUMBER) RETURN NUMBER
is vcName number(30);
begin
    select id_person
    into vcName
    from personborrowsbook
    where id_book=pid_book ;
    return (VCNAME);
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE ('Could not find a register with the name||pId.');
        WHEN STORAGE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
        WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
END;


FUNCTION getpbbIdbook(pid_person IN NUMBER) RETURN NUMBER
is vcID NUMBER(10);
begin
    select id_book
    into vcID 
    from personborrowsbook
    where id_person=pid_person;
    return vcID;
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE ('Could not find a register with the name||pcanton.');
        WHEN STORAGE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
        WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
end;


FUNCTION getpbbloan_date(pid_person IN NUMBER, pid_book IN NUMBER) RETURN DATE
is vcID DATE;
begin
    select loan_date
    into vcID 
    from personborrowsbook
    where id_person=pid_person AND id_book = pid_book;
    return vcID;
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE ('Could not find a register with the name||pcanton.');
        WHEN STORAGE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
        WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
end;
FUNCTION getpbbreturn_date(pid_person IN NUMBER, pid_book IN NUMBER) RETURN DATE
is vcID DATE;
begin
    select return_date
    into vcID 
    from personborrowsbook
    where id_person=pid_person AND id_book = pid_book;
    return vcID;
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE ('Could not find a register with the name||pcanton.');
        WHEN STORAGE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
        WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
end;

END control_personborrowsbook;