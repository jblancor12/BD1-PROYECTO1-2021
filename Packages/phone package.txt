
Create or replace package control_phone is
Type t_ref_cursor is ref cursor;
PROCEDURE insert_phone (pnumber IN NUMBER);
PROCEDURE remove_phone (pid_phone IN NUMBER);
PROCEDURE update_phone_number(pid_phone IN NUMBER, pnumber IN NUMBER);
FUNCTION getphonenumber(pid_phone IN NUMBER) RETURN NUMBER;
FUNCTION get_phone_id(pnumber NUMBER) return number;
Function show_phone return t_ref_cursor;
end control_phone;
/
CREATE OR REPLACE PACKAGE BODY control_phone IS

Function show_phone return t_ref_cursor is dept_cursor t_ref_cursor;
begin
open dept_cursor for
select id_phone, phone_number
from phone;
return dept_cursor ; 
end show_phone;



PROCEDURE insert_phone (pnumber IN NUMBER) AS
BEGIN
	INSERT INTO phone(phone_number)
	VALUES(pnumber);
END insert_phone;

PROCEDURE remove_phone (pid_phone IN NUMBER) AS
e_invalid_phone EXCEPTION;
BEGIN
	DELETE FROM phone
	WHERE id_phone = pid_phone;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_phone;
    END IF;
    EXCEPTION
    WHEN e_invalid_phone THEN
        DBMS_OUTPUT.PUT_LINE('No such phone.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to remove.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END remove_phone;


PROCEDURE update_phone_number(pid_phone IN NUMBER, pnumber IN NUMBER) AS
e_invalid_phone EXCEPTION;
BEGIN
	UPDATE phone
	SET phone_number = pnumber
	WHERE id_phone = pid_phone;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_phone;
    END IF;
    EXCEPTION
    WHEN e_invalid_phone THEN
        DBMS_OUTPUT.PUT_LINE('No such phone.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END update_phone_number;


FUNCTION getphonenumber(pid_phone IN NUMBER) RETURN NUMBER
IS 
    vcnumber NUMBER(20);
    BEGIN
        SELECT phone_number
        INTO vcnumber
        FROM phone
        WHERE id_phone = pid_phone;
        RETURN (vcnumber);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the number||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;
    
    
    
    
FUNCTION get_phone_id(pnumber NUMBER) return number

IS 
    vcID NUMBER(20);
    BEGIN
        SELECT id_phone
        INTO vcID
        FROM phone
        WHERE phone_number = pnumber;
        RETURN (vcID);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the number||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;
end control_phone;