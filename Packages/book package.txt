CREATE OR REPLACE PACKAGE control_book IS
Type t_ref_cursor is ref cursor;
PROCEDURE insert_book(ptitle IN VARCHAR2, pid_book_edition NUMBER, pid_editorial NUMBER, pid_calification NUMBER);
PROCEDURE remove_book(pid_book IN NUMBER);
PROCEDURE update_book_title(pid_book IN NUMBER, ptitle IN VARCHAR2);
PROCEDURE update_book_id_book_edition(pid_book IN NUMBER, pid IN NUMBER);
PROCEDURE update_book_id_editorial(pid_book IN NUMBER, pid IN NUMBER);
PROCEDURE update_book_id_calification(pid_book IN NUMBER, pid IN NUMBER);
PROCEDURE update_book_id_photo(pid_book IN NUMBER, pid IN NUMBER);
Function show_books return t_ref_cursor;
FUNCTION getMaxID return NUMBER;
FUNCTION getbooktitle(pid_book IN NUMBER) RETURN VARCHAR2 ;
FUNCTION getbookidbook_edition(pid_book IN NUMBER) RETURN NUMBER;
FUNCTION getbookideditorial(pid_book IN NUMBER) RETURN NUMBER;
FUNCTION getbookidcalification(pid_book IN NUMBER) RETURN NUMBER;
FUNCTION getbookidphoto(pid_book IN NUMBER) RETURN NUMBER;
FUNCTION getbookID(ptitle IN VARCHAR2) RETURN NUMBER;
END control_book;
/
CREATE OR REPLACE PACKAGE BODY control_book IS
Function show_books return t_ref_cursor is dept_cursor t_ref_cursor;
begin
open dept_cursor for
select a.id_book, a.title, e.description, d.description,b.name, c.score
from book a
join editorial e
on a.id_editorial = e.id_editorial
join bookedition d
on a.id_book_edition= d.id_edition
join bookxauthor j
on a.id_book = j.id_book
join author b
on j.id_author = b.id_author
join calification c
on a.id_calification = c.id_calification;
return dept_cursor ; 
end show_books; 


FUNCTION getMaxID RETURN NUMBER
IS
    vcVar NUMBER(30);
    BEGIN
	select Max(id_book)
	into vcVar
	from book;
	return (vcVar);
end getMaxID;

PROCEDURE insert_book(ptitle IN VARCHAR2, pid_book_edition NUMBER, pid_editorial NUMBER, pid_calification NUMBER)AS
BEGIN 
	INSERT INTO book(title, id_book_edition, id_editorial, id_calification)
	VALUES(ptitle, pid_book_edition, pid_editorial, pid_calification);
	COMMIT;
END insert_book;

PROCEDURE remove_book (pid_book IN NUMBER) AS
e_invalid_book EXCEPTION;
BEGIN
	DELETE FROM book
	WHERE id_book = pid_book;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_book;
    END IF;
    EXCEPTION
    WHEN e_invalid_book THEN
        DBMS_OUTPUT.PUT_LINE('No such book.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to remove.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END remove_book;



PROCEDURE update_book_title(pid_book IN NUMBER, ptitle IN VARCHAR2) AS
e_invalid_book EXCEPTION;
BEGIN
	UPDATE book
	SET title = ptitle
	WHERE id_book = pid_book;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_book;
    END IF;
    EXCEPTION
    WHEN e_invalid_book THEN
        DBMS_OUTPUT.PUT_LINE('No such book.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END update_book_title;


PROCEDURE update_book_id_book_edition(pid_book IN NUMBER, pid IN NUMBER) AS
e_invalid_book EXCEPTION;
BEGIN
	UPDATE book
	SET id_book_edition = pid
	WHERE id_book = pid_book;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_book;
    END IF;
    EXCEPTION
    WHEN e_invalid_book THEN
        DBMS_OUTPUT.PUT_LINE('No such book.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END update_book_id_book_edition;

PROCEDURE update_book_id_editorial(pid_book IN NUMBER, pid IN NUMBER) AS
e_invalid_book EXCEPTION;
BEGIN
	UPDATE book
	SET id_editorial = pid
	WHERE id_book = pid_book;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_book;
    END IF;
    EXCEPTION
    WHEN e_invalid_book THEN
        DBMS_OUTPUT.PUT_LINE('No such book.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END update_book_id_editorial;

PROCEDURE update_book_id_calification(pid_book IN NUMBER, pid IN NUMBER) AS
e_invalid_book EXCEPTION;
BEGIN
	UPDATE book
	SET id_calification = pid
	WHERE id_book = pid_book;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_book;
    END IF;
    EXCEPTION
    WHEN e_invalid_book THEN
        DBMS_OUTPUT.PUT_LINE('No such book.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END update_book_id_calification;

PROCEDURE update_book_id_photo(pid_book IN NUMBER, pid IN NUMBER) AS
e_invalid_book EXCEPTION;
BEGIN
	UPDATE book
	SET id_photo = pid
	WHERE id_book = pid_book;
	COMMIT;
    IF SQL%NOTFOUND THEN 
        RAISE e_invalid_book;
    END IF;
    EXCEPTION
    WHEN e_invalid_book THEN
        DBMS_OUTPUT.PUT_LINE('No such book.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error has ocurred in the attempt to update.');
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
END update_book_id_photo;

FUNCTION getbooktitle(pid_book IN NUMBER) RETURN VARCHAR2
IS
    vcVar VARCHAR2(100);
    BEGIN
        SELECT title
        INTO vcVar
        FROM book
        WHERE id_book = pid_book;
        RETURN(vcVar);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the title||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;



FUNCTION getbookidbook_edition(pid_book IN NUMBER) RETURN NUMBER
IS
    vcVar NUMBER(30);
    BEGIN
        SELECT id_book_edition
        INTO vcVar
        FROM book
        WHERE id_book = pid_book;
        RETURN(vcVar);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the title||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;

FUNCTION getbookideditorial(pid_book IN NUMBER) RETURN NUMBER
IS
    vcVar NUMBER(30);
    BEGIN
        SELECT id_editorial
        INTO vcVar
        FROM book
        WHERE id_book = pid_book;
        RETURN(vcVar);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the title||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;

FUNCTION getbookidcalification(pid_book IN NUMBER) RETURN NUMBER
IS
    vcVar NUMBER(30);
    BEGIN
        SELECT id_calification
        INTO vcVar
        FROM book
        WHERE id_book = pid_book;
        RETURN(vcVar);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the title||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;

FUNCTION getbookidphoto(pid_book IN NUMBER) RETURN NUMBER
IS
    vcVar NUMBER(30);
    BEGIN
        SELECT id_photo
        INTO vcVar
        FROM book
        WHERE id_book = pid_book;
        RETURN(vcVar);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the title||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;

FUNCTION getbookID(ptitle IN VARCHAR2) RETURN NUMBER
IS
    vcVar NUMBER(30);
    BEGIN
        SELECT id_book
        INTO vcVar
        FROM book
        WHERE title = ptitle;
        RETURN(vcVar);
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE ('Your SELECT statement retrieved multiple rows.');
            WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ('Could not find a register with the title||pcnombre.');
            WHEN STORAGE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('PL/SQL ran out of memory or memory is corrupted.');
            WHEN VALUE_ERROR THEN
            DBMS_OUTPUT.PUT_LINE ('An arithmetic, conversion, truncation, or size constraint error ocurred.');
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ('Unexpected error.');
    END;

END control_book;

